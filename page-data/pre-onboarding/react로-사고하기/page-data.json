{"componentChunkName":"component---src-templates-blog-post-js","path":"/pre-onboarding/react로-사고하기/","result":{"data":{"site":{"siteMetadata":{"title":"iris.dew","author":"irisdew","siteUrl":"https://irisdew.github.io","comment":{"disqusShortName":"","utterances":"irisdew/irisdew.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"480de7f7-360f-5102-a577-bc351306973a","excerpt":"단일 책임 원칙 single responsibility principle 하나의 컴포넌트는 한가지 일을 하는게 이상적이라는 원칙 1 컴포넌트 1 일 1 함수 1 일 1 파일 1 일 코드가 150줄이 넘어간다면 분명히 줄일 수 있다. 하위 컴포넌트로 분리하자.  정적 UI를 만든 후 컴포넌트 계층 구조로 나누기 top-down bottom-up State 추가하기  state 추가의 핵심은 중복배제원칙 애플리케이션이 필요로 하는 가장 최소한의 state…","html":"<p><code class=\"language-text\">리액트 공식문서 &lt;React로 사고하기>를 읽고 정리한 글입니다.</code></p>\n<h3 id=\"단일-책임-원칙\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99\" aria-label=\"단일 책임 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 책임 원칙</h3>\n<p><strong><em>single responsibility principle</em></strong></p>\n<p>하나의 컴포넌트는 한가지 일을 하는게 이상적이라는 원칙</p>\n<ul>\n<li>1 컴포넌트 1 일</li>\n<li>1 함수 1 일</li>\n<li>1 파일 1 일</li>\n<li>코드가 150줄이 넘어간다면 분명히 줄일 수 있다. 하위 컴포넌트로 분리하자. </li>\n</ul>\n<h3 id=\"정적-ui를-만든-후-컴포넌트-계층-구조로-나누기\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-ui%EB%A5%BC-%EB%A7%8C%EB%93%A0-%ED%9B%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0%EB%A1%9C-%EB%82%98%EB%88%84%EA%B8%B0\" aria-label=\"정적 ui를 만든 후 컴포넌트 계층 구조로 나누기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 UI를 만든 후 컴포넌트 계층 구조로 나누기</h3>\n<ul>\n<li>top-down</li>\n<li>bottom-up</li>\n</ul>\n<h3 id=\"state-추가하기\" style=\"position:relative;\"><a href=\"#state-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"state 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State 추가하기</h3>\n<p> state 추가의 핵심은 <strong>중복배제원칙</strong></p>\n<ul>\n<li>애플리케이션이 필요로 하는 가장 최소한의 state를 찾고 이를 통해 나머지 모든 것들이 필요에 따라 그때그떄 계산되도록 만드세요.</li>\n<li>예를 들어 TODO 리스트를 만든다고 하면, TODO 아이템을 저장하는 배열만 유지하고 TODO 아이템의 개수를 표현하는 state를 별도로 만들지 마세요.</li>\n</ul>\n<p>어떤 컴포넌트가 state를 소유하고 변경할지, state의 위치 정해주기</p>\n<h3 id=\"역방향-데이터-흐름-추가하기\" style=\"position:relative;\"><a href=\"#%EC%97%AD%EB%B0%A9%ED%96%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%9D%90%EB%A6%84-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"역방향 데이터 흐름 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>역방향 데이터 흐름 추가하기</h3>\n<ul>\n<li>예를들어 우리는 사용자가 폼을 변경할 떄마다 사용자의 입력을 반영할 수 있도록 state를 업데이트하기를 원합니다.\n컴포넌트에 콜백을 넘겨서 state가 업데이트 되어야 할 때마다 호출되도록 할 것입니다. </li>\n</ul>\n<h3 id=\"react-사고방식\" style=\"position:relative;\"><a href=\"#react-%EC%82%AC%EA%B3%A0%EB%B0%A9%EC%8B%9D\" aria-label=\"react 사고방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 사고방식</h3>\n<p>코드를 쓸 일보다 읽을 일이 더 많다는 사실을 기억하세요.\n<strong>모듈화</strong>되고 <strong>명시적</strong>인 코드는 읽을 때 덜 어렵습니다.\n컴포넌트를 적절히 만들면 코드 재사용성을 통해 코드 라인이 줄어들기 시작할 것입니다 :)</p>","frontmatter":{"title":"React로 사고하기","date":"August 09, 2021"}}},"pageContext":{"slug":"/pre-onboarding/react로-사고하기/","previous":{"fields":{"slug":"/pre-onboarding/더-나은-리액트-프로젝트를-위해/"},"frontmatter":{"title":"더 나은 리액트 프로젝트를 위해"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}