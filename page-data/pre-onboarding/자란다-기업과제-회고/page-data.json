{"componentChunkName":"component---src-templates-blog-post-js","path":"/pre-onboarding/자란다-기업과제-회고/","result":{"data":{"site":{"siteMetadata":{"title":"iris.dew","author":"irisdew","siteUrl":"https://irisdew.github.io","comment":{"disqusShortName":"","utterances":"irisdew/irisdew.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"c7365c1c-e054-594a-925b-8a94be9a96f9","excerpt":"배포 주소 🔗 자란다 - Team RE4CT Github  미팅로그 어떻게 협업을 했는가? 7인 팀프로젝트였고, 만들어야할 기능은 크게 로그인/회원가입/관리자 페이지였다. 그래서 로그인팀/회원가입팀/관리자팀으로 2~3명씩 팀을 나눴고,  나는 그 중 회원가입팀에 들어가 혜린님과 함께 작업한 후 작업 내역을 전체에 합쳤다! 으로 프로그래밍 하는 경험, 로 프로그래밍 하는 경험을 모두 해볼 수 있었다. 이번 협업에서 배운점, 좋았던 점 👍 Rebase와 Squash로 깔끔해진 커밋로그 Utils…","html":"<h3 id=\"배포-주소\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%ED%8F%AC-%EC%A3%BC%EC%86%8C\" aria-label=\"배포 주소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배포 주소</h3>\n<h5 id=\"-자란다---team-re4ct\" style=\"position:relative;\"><a href=\"#-%EC%9E%90%EB%9E%80%EB%8B%A4---team-re4ct\" aria-label=\" 자란다   team re4ct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔗 <a href=\"https://epic-jepsen-a6fdee.netlify.app/\">자란다 - Team RE4CT</a></h5>\n<p><a href=\"https://github.com/hami-dev/wanted-jaranda-project\">Github</a>  <a href=\"https://www.notion.so/Team-meeting-ce0afb54e99946088c3b25ac4f5d0b68\">미팅로그</a></p>\n<hr>\n<h1 id=\"어떻게-협업을-했는가\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%98%91%EC%97%85%EC%9D%84-%ED%96%88%EB%8A%94%EA%B0%80\" aria-label=\"어떻게 협업을 했는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 협업을 했는가?</h1>\n<p>7인 팀프로젝트였고, 만들어야할 기능은 크게 로그인/회원가입/관리자 페이지였다.</p>\n<p>그래서 로그인팀/회원가입팀/관리자팀으로 2~3명씩 팀을 나눴고, </p>\n<p>나는 그 중 <strong>회원가입</strong>팀에 들어가 혜린님과 함께 작업한 후 작업 내역을 전체에 합쳤다!</p>\n<p><code class=\"language-text\">팀</code>으로 프로그래밍 하는 경험, <code class=\"language-text\">페어</code>로 프로그래밍 하는 경험을 모두 해볼 수 있었다.</p>\n<h3 id=\"이번-협업에서-배운점-좋았던-점-\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%88-%ED%98%91%EC%97%85%EC%97%90%EC%84%9C-%EB%B0%B0%EC%9A%B4%EC%A0%90-%EC%A2%8B%EC%95%98%EB%8D%98-%EC%A0%90-\" aria-label=\"이번 협업에서 배운점 좋았던 점  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번 협업에서 배운점, 좋았던 점 👍</h3>\n<ul>\n<li>Rebase와 Squash로 깔끔해진 커밋로그</li>\n<li>Utils, Constants, GlobalStyles 사용</li>\n<li>다른 사람의 코드를 읽고 배우기</li>\n</ul>\n<hr>\n<h1 id=\"완벽한-회원가입-form을-만들기-위한-고군분투-🧐\" style=\"position:relative;\"><a href=\"#%EC%99%84%EB%B2%BD%ED%95%9C-%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-form%EC%9D%84-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EC%9C%84%ED%95%9C-%EA%B3%A0%EA%B5%B0%EB%B6%84%ED%88%AC-%F0%9F%A7%90\" aria-label=\"완벽한 회원가입 form을 만들기 위한 고군분투 🧐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완벽한 회원가입 form을 만들기 위한 고군분투 🧐</h1>\n<h3 id=\"useinput이라는-custom-hook-사용하기\" style=\"position:relative;\"><a href=\"#useinput%EC%9D%B4%EB%9D%BC%EB%8A%94-custom-hook-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"useinput이라는 custom hook 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useInput이라는 Custom Hook 사용하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">,</span> onChange<span class=\"token punctuation\">,</span> inputRef<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전에 강의에서도 본 적이 있고, 여러 블로그에도 올라와 있는 Custom Hook이다.</p>\n<p>리액트에서 Form 관련 라이브러리를 사용하지 않고 Form을 구현하려면,\ninput창 하나마다 각각 state, setState가 필요하고, onChange될 때마다 state를 변경해주는 onChange 함수 로직이 필요하다.</p>\n<p>그리고 이번 과제에서는\n잘못된 값을 입력한 input창으로 focus를 자동으로 옮겨주는 기능을 구현하고자 했기 때문에\n모든 input창에 ref도 필요했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>email<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> onChangeEmail<span class=\"token punctuation\">,</span> inputEmail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pwd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> onChangePwd<span class=\"token punctuation\">,</span> inputPwd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> inputName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> inputAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>post<span class=\"token punctuation\">,</span> setPost<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> inputPostCode<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>addr<span class=\"token punctuation\">,</span> setAddr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>extraAddr<span class=\"token punctuation\">,</span> setExtraAddr<span class=\"token punctuation\">,</span> onChangeExtraAddr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cardNum<span class=\"token punctuation\">,</span> setCardNum<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> inputCard<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>반복적으로 필요한 것들을 묶어 useInput으로 만들어 잘 활용했다!</p>\n<h3 id=\"daum-우편번호-api-연동\" style=\"position:relative;\"><a href=\"#daum-%EC%9A%B0%ED%8E%B8%EB%B2%88%ED%98%B8-api-%EC%97%B0%EB%8F%99\" aria-label=\"daum 우편번호 api 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Daum 우편번호 API 연동</h3>\n<p><a href=\"https://postcode.map.daum.net/guide\">다음 우편번호 API</a>는 사용하기 매우 편리했다. </p>\n<p>key를 발급받을 필요도 없고, CDN link 한 줄만 추가해주면 바로 사용이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>npm에 <a href=\"https://www.npmjs.com/package/react-daum-postcode\">react-daum-postcode</a>라고 더욱더 편리하게 사용할 수 있는 패키지가 있었으나..\n그냥 곧바로 API를 가져와 연동해봤다. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> daum <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>daum <span class=\"token comment\">// 최상단에 daum을 선언해주어야 한다.</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setDaumAddr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> setPost<span class=\"token punctuation\">,</span> setAddr<span class=\"token punctuation\">,</span> setExtraAddr <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  daum<span class=\"token punctuation\">.</span>postcode<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">daum<span class=\"token punctuation\">.</span>Postcode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">oncomplete</span><span class=\"token operator\">:</span>  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// 원하는 방식을 API 문서에서 예시코드를 가져와 사용하면 된다.</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Daum 주소 팝업창 관련 에러가 발생한 경우 <a href=\"https://github.com/daumPostcode/QnA\">여기</a>에서 FAQ를 읽어보거나 issue 탭에서 다른 사용자들이 겪었던 에러를 검색해보면 금방 해결할 수 있다!</p>\n<p>주소를 선택해도 팝업창이 닫히지 않는 에러가 있었는데,\n“주소 검색” 버튼의 type이 “submit” 상태여서\n검색을 눌렀을 때 팝업 아래의 부모 페이지가 새로고침 되어,\n부모 페이지가 팝업창을 제어할 수 있는 권한을 잃어버리는 문제였다…!  </p>\n<p><a href=\"https://github.com/daumPostcode/QnA/issues/596\">https://github.com/daumPostcode/QnA/issues/596</a> 를 보고 해결할 수 있었다.</p>\n<p>내가 겪은 문제는 나만 겪는 문제가 아니라 누군가 이미 겪었던, 앞으로 누군가 겪을 문제라는 것!</p>\n<p>개발이 재밌는 이유 중 하나다. 🎮</p>\n<h3 id=\"비밀번호-유효성-검사-ui\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-ui\" aria-label=\"비밀번호 유효성 검사 ui permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비밀번호 유효성 검사 UI</h3>\n<p><img src=\"https://user-images.githubusercontent.com/76525368/128725685-4f16690f-0d49-4e0d-b49a-e5ed70fdfb4a.png\" alt=\"Untitled\"></p>\n<p>자란다 홈페이지를 많이 참고하면서 회원가입을 구현했는데, </p>\n<p>자란다 홈페이지의 회원가입에서 눈에 띈 부분은\n비밀번호 유효성 검사에 대해 사용자가 인지하기 편하게\n비밀번호 입력폼 하단에 체크체크 할 수 있는 UI가 있다는 점이었다!</p>\n<p>마음에 드는 UI였고 따라해보고 싶어 구현해보았다.</p>\n<p>사용자에게 비밀번호 규칙을 직관적으로 알려주면서도,\n유효성 검사도 할 수 있는 좋은 UI라는 생각이 들어\n재밌게 만들어 볼 수 있었다!</p>\n<h3 id=\"정규식을-사용한-유효성-검사\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%EC%8B%9D%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC\" aria-label=\"정규식을 사용한 유효성 검사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규식을 사용한 유효성 검사</h3>\n<p>유효한 값을 입력했는지, 정규식을 활용하여 검사를 했다.</p>\n<p>편리한 정규식! good!</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> validation <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">isName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[가-힣]{2,6}$</span><span class=\"token regex-delimiter\">/</span></span>\n    <span class=\"token keyword\">return</span> reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function\">isAge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[1-9]?[0-9]{1}$|^100$</span><span class=\"token regex-delimiter\">/</span></span>\n    <span class=\"token keyword\">return</span> reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"useref로-focus-제어\" style=\"position:relative;\"><a href=\"#useref%EB%A1%9C-focus-%EC%A0%9C%EC%96%B4\" aria-label=\"useref로 focus 제어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useRef로 focus 제어</h3>\n<p>useRef는 사용할 일이 잘 없는 Hook이라고 생각했는데</p>\n<p>focus를 자동으로 이동시키도록 해주기 위해서는 HTML 요소에 접근이 필요했다. </p>\n<p>focus가 이동시켜지길 원하는 input 태그에 ref 인자를 추가해주고</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 자동으로 focus를 이동시켜 줄 수 있었다. </p>\n<hr>\n<h2 id=\"내가-만들었지만-아쉬웠던-코드-\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EA%B0%80-%EB%A7%8C%EB%93%A4%EC%97%88%EC%A7%80%EB%A7%8C-%EC%95%84%EC%89%AC%EC%9B%A0%EB%8D%98-%EC%BD%94%EB%93%9C-\" aria-label=\"내가 만들었지만 아쉬웠던 코드  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내가 만들었지만 아쉬웠던 코드 🤔</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmitHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isValidatedUserInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t      userListStorage<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>usersInfo<span class=\"token punctuation\">,</span> newUserInfo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t      isValidatedUserInfo <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">toast</span><span class=\"token punctuation\">(</span>toastMsg<span class=\"token punctuation\">.</span><span class=\"token constant\">SIGNUP_SUCCESSED</span><span class=\"token punctuation\">)</span>\n\t      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t        history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span>\n\t      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>아쉬운 점 : 비동기 처리에 자신이 없어서 일단 setTimeout을 사용했다</strong></p>\n<ul>\n<li>setTimeout은 시간을 0.00001초만 주어도 비동기함수로 처리된다</li>\n</ul>\n<p><strong>⇒  <em>async/await로 해보면 좋지 않았을까?</em></strong></p>\n<hr>\n<h1 id=\"과제를-마치며\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C%EB%A5%BC-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"과제를 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제를 마치며…</h1>\n<p>원래 정해진 기한이 있는 프로젝트를 끝내고 나면\n만족감보다는 뭔가 더 잘할 수 있었겠다는 아쉬움이 훨씬 크게 느껴졌었다.</p>\n<p>그런데 이번 프로젝트는 팀원들의 합도 잘 맞았고! 결과물이 정말 마음에 들었다.</p>\n<p><strong>디자인</strong> (<a href=\"https://jaranda.kr/\">자란다 홈페이지</a>를 clone) 에 신경을 썼고,</p>\n<p><strong>추가기능</strong>(마이페이지 구현, 관리자 페이지의 섬세한 기능들! 등)을 구현했고, </p>\n<p><strong>더 나은 코드에 대한 고민</strong>을 하면서 개발해서였던 것 같다. 만족스럽다 🥰</p>","frontmatter":{"title":"자란다 기업과제 회고","date":"August 07, 2021"}}},"pageContext":{"slug":"/pre-onboarding/자란다-기업과제-회고/","previous":{"fields":{"slug":"/pre-onboarding/더-나은-리액트-프로젝트를-위해/"},"frontmatter":{"title":"더 나은 리액트 프로젝트를 위해"}},"next":{"fields":{"slug":"/react/react로-사고하기/"},"frontmatter":{"title":"React로 사고하기"}}}},"staticQueryHashes":["2486386679","3128451518"]}