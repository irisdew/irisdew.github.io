{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/브라우저-동작-원리/","result":{"data":{"site":{"siteMetadata":{"title":"iris.dew","author":"irisdew","siteUrl":"https://irisdew.github.io","comment":{"disqusShortName":"","utterances":"irisdew/irisdew.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"f885e8f0-632f-560f-a794-1053640c2270","excerpt":"브라우저란? 월드와이드웹(WWW)에서 정보를 검색, 표현, 탐색하기 위한 소프트웨어 브라우저의 핵심 기능은 사용자가 선택한 자원을 서버에 요청하고 브라우저에 표시하는 것 💡 자원 Resource \n사용자가 원하는 웹페이지를 구성하기 위해 필요한 파일들 \n(HTML, CSS, JS, 이미지 …) 브라우저는 HTML과 CSS 명세 (웹 표준화 기구인 W3C(World Wide Web Consortium)에서 정해진 명세) 에 따라 HTML 파일을 해석해서 표시 브라우저 구조 image UI User…","html":"<h2 id=\"브라우저란\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%9E%80\" aria-label=\"브라우저란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저란?</h2>\n<p>월드와이드웹(WWW)에서 정보를 검색, 표현, 탐색하기 위한 소프트웨어</p>\n<p>브라우저의 핵심 기능은 사용자가 선택한 <strong>자원</strong>을 서버에 요청하고 브라우저에 표시하는 것</p>\n<blockquote>\n<p>💡 <strong>자원 Resource</strong> <br />\n사용자가 원하는 웹페이지를 구성하기 위해 필요한 파일들\n(HTML, CSS, JS, 이미지 …)</p>\n</blockquote>\n<p>브라우저는 HTML과 CSS 명세 <em>(웹 표준화 기구인 W3C(World Wide Web Consortium)에서 정해진 명세)</em> 에 따라 HTML 파일을 해석해서 표시</p>\n<br />\n<h2 id=\"브라우저-구조\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EA%B5%AC%EC%A1%B0\" aria-label=\"브라우저 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 구조</h2>\n<p><img src=\"https://user-images.githubusercontent.com/76525368/129310978-457fe83d-5648-4219-871e-ddf38b9d3f39.png\" alt=\"image\"></p>\n<ul>\n<li>\n<p><strong>UI</strong> User Interface 사용자 인터페이스\n주소 표시 줄 / 이전 버튼과 다음 버튼 / 북마크 / 새로 고침, 정지, 홈 버튼 등…</p>\n<p>요청한 페이지를 보여주는 창을 제외하고 사용자와 상호작용하는 나머지 부분</p>\n</li>\n<li><strong>Broweser Engine</strong> 브라우저 엔진\n사용자 인터페이스와 렌더링 엔진을 연결\n브라우저 소프트웨어를 동작시켜주는 핵심 엔진</li>\n<li>\n<p><strong>Rendering Engine</strong> 렌더링 엔진\n요청한 콘텐츠를 브라우저 화면에 표시\nHTML과 CSS를 파싱하여 웹페이지를 화면에 표시</p>\n<blockquote>\n<p> ⚙ <strong>Rendering Engine의 목표</strong></p>\n<ol>\n<li>HTML, CSS, JS, 이미지 등 웹페이지에 포함된 모든 요소들을 <strong>화면에 보여준다</strong></li>\n<li>\n<p>업데이트가 필요할 때, <strong>효율적</strong>으로 렌더링을 할 수 있도록 <strong>자료구조를 생성</strong>한다</p>\n<ul>\n<li>사용자 동작으로 인해 입력이 발생하거나, 스크롤이 생기거나, 애니메이션이 동작할 때</li>\n<li>비동기 요청으로 인한 데이터 로딩이 발생했을 때</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n <br />\n<blockquote>\n<p>🧭 <strong>브라우저마다 다른 렌더링 엔진</strong></p>\n<ul>\n<li>Webkit (Safari)</li>\n<li>Gacko (Firefox)</li>\n<li>\n<p>Blink (Chrome) </p>\n<ul>\n<li><em>예전에는 Webkit을 사용하다가 2013년부터 Webkit에서 갈라져나온 Blink를 사용</em></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><strong>Networking</strong> 네트워크</p>\n<p>HTTP 요청과 같은 네트워크 호출에 사용, 각종 네트워크 요청을 수행, 서버와 통신</p>\n</li>\n<li>\n<p><strong>JavaScript Interpreter</strong> 자바스크립트 해석기</p>\n<p>자바스크립트 코드를 실행하는 인터프리터</p>\n<p>Chrome의 경우 V8을 사용</p>\n<blockquote>\n<p> 💡 <strong>JavaScript는 렌더링 엔진이 아닌 JavaScript Interpreter가 처리한다</strong></p>\n<ul>\n<li>HTML 파서는 <code class=\"language-text\">&lt;script></code>태그를 만나면 자바스크립트 코드를 실행하기 위해 DOM 생성 프로세스를 중지하고 자바스크립트 엔진으로 제어 권한을 넘긴다</li>\n<li>제어 권한을 넘겨받은 자바스크립트 엔진은 <code class=\"language-text\">&lt;script></code>태그 내의 자바스크립트 코드 or <code class=\"language-text\">&lt;script></code>태그의 src에 정의된 js 파일을 로드하고 파싱하여 실행한다</li>\n<li>자바스크립트의 실행이 완료되면 다시 HTML 파서로 제어 권한을 넘겨 브라우저가 중지했던 시점부터 DOM 생성을 재개한다 <br/>\n➡ 그러므로 HTML 요소를 다 처리한 이후, 자바스크립트를 처리할 수 있도록  <strong><code class=\"language-text\">&lt;body></code>태그 하단</strong>에 <code class=\"language-text\">&lt;script></code>태그를 위치시키는 것이 좋다</li>\n</ul>\n</blockquote>\n<br />\n<blockquote>\n<p>🔧 JavaScript 코드는 <strong>body 태그 하단</strong>에 위치하면 script 로딩 지연으로 인해 동기적으로 동작하는 브라우저 동작에 blocking이 발생하지 않아 페이지 로딩 시간이 단축된다. </p>\n</blockquote>\n<blockquote>\n<p>💄 CSS 코드는 <strong>head 태그 안</strong>에 위치하여 렌더링 처리 시에 브라우저가 더 빨리 참고할 수 있게 하는 것이 좋다.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>UI Backend</strong> </p>\n<p>UI를 처리할 수 있는 백엔드 영역</p>\n</li>\n<li>\n<p><strong>Data Persistence</strong> 자료 저장소</p>\n<p>자료를 저장하는 계층</p>\n<p>localStorage나 Cookie와 같이 보조 기억장치에 데이터를 저장하는 파트</p>\n</li>\n</ul>\n<br />\n<h2 id=\"브라우저-렌더링-과정\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95\" aria-label=\"브라우저 렌더링 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 렌더링 과정</h2>\n<p><img src=\"https://user-images.githubusercontent.com/76525368/129313001-50073261-7b79-4219-84d4-41ba9301fa51.png\" alt=\"image\"></p>\n<ol>\n<li>\n<p><strong>DOM tree 생성</strong></p>\n<p>브라우저의 렌저링 엔진이 HTML 코드를 읽고 파싱하여 DOM tree를 생성</p>\n<ul>\n<li><code class=\"language-text\">HTML 코드</code>를 어휘분석을 통해 HTML5 표준에 지정된 고유한 <code class=\"language-text\">토큰</code>으로 변환</li>\n<li>렉싱 과정을 통해 <code class=\"language-text\">토큰</code>을 해당 속성과 규칙을 정의하는 <code class=\"language-text\">Node</code>로 변환</li>\n<li>각 <code class=\"language-text\">Node</code>가 서로 연관성을 가질 수 있도록 <code class=\"language-text\">DOM tree</code>를 생성</li>\n</ul>\n</li>\n<li>\n<p><strong>Render tree 생성</strong>\n화면에 표시되어야 할 모든 Node의 컨텐츠, 스타일 정보를 포함하는 tree</p>\n<ul>\n<li>CSS 파일이나 HTML에 inline으로 작성된 스타일 코드를 파싱하여 <code class=\"language-text\">CSSOM</code>을 구성</li>\n<li>document부터 각 Node를 순회하면서 각각에 맞는 CSSOM을 찾아 규칙을 적용</li>\n<li><code class=\"language-text\">DOM 트리</code>와 <code class=\"language-text\">CSSOM</code>을 결합하여 <code class=\"language-text\">Render tree</code> 생성</li>\n<li>meta 태그나 display:none 속성을 가진 요소 같은 것들은 렌더와 무관하기 때문에 Render tree에 포함되지 않음</li>\n</ul>\n</li>\n<li>\n<p><strong>Layout(reflow)</strong></p>\n<p>뷰포트 내에 생성된 render tree의 각 노드들의 정확한 위치와 크기를 결정</p>\n<ul>\n<li>%, em과 같은 상대 단위를 사용했을 때 뷰포트에 맞춰 px로 변환</li>\n</ul>\n</li>\n<li><strong>Paint (repaint)</strong>\n마지막으로 구성한 레이아웃을 실제로 화면에 픽셀로 그리는 과정</li>\n</ol>\n<br />\n<h2 id=\"브라우저가-화면을-다시-그리는-경우\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EA%B0%80-%ED%99%94%EB%A9%B4%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EA%B7%B8%EB%A6%AC%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"브라우저가 화면을 다시 그리는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저가 화면을 다시 그리는 경우</h2>\n<p><img src=\"https://user-images.githubusercontent.com/76525368/129318981-f5171657-4e4f-4511-bf2a-34c7eb6adc52.png\" alt=\"image\"></p>\n<ol>\n<li>\n<p><strong>다시 Layout이 발생</strong>\n주로 <strong>요소의 크기</strong>나 <strong>위치</strong>가 바뀔 때, 혹은 <strong>브라우저 창의 크기</strong>가 바뀌었을때 다시 발생</p>\n<p>레이아웃 수치를 다시 계산해서 배치를 해야하기 때문에,  레이아웃 과정이 다시 발생하고 페인트와 레이어 합성 과정까지 다시 거쳐야함</p>\n</li>\n<li>\n<p><strong>Paint부터 다시 발생하는 경우</strong>\n주로 배경 이미지나 텍스트 색상, 그림자 등 <strong>레이아웃의 수치를 변화시키지 않는 스타일의 변경</strong>이 일어났을 때 발생</p>\n<p>레이아웃 과정이 다시 발생하지 않기 때문에 성능상으로 좀 더 이점</p>\n</li>\n<li>\n<p><strong>레이어의 합성만 다시 발생하는 경우</strong>\n레이어의 합성(Composite)만 발생하기 때문에 성능적으로 가장 큰 이점</p>\n<ul>\n<li>레이어는 포토샵의 레이어와 비슷하게 페인팅할 영역을 나누어놓은 것을 의미</li>\n<li>Chrome의 경우에는 레이아웃 과정 이후에 정해진 기준이나 필요에 의해서 브라우저가 레이어를 생성 </li>\n<li>렌더링 엔진이 각 레이어를 프린팅 과정에서 각각 그려준 다음에 하나의 비트맵으로 합성해서 페이지를 완성</li>\n</ul>\n<br />\n</li>\n</ol>\n<blockquote>\n<p>👀 <a href=\"https://csstriggers.com/\">https://csstriggers.com/</a> 에서 <br/> 브라우저, CSS요소에 따라 3가지 중 어떤 경우가 발생하는지 알 수 있음!</p>\n</blockquote>\n<br />\n<hr/>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h3>\n<ul>\n<li><a href=\"https://poiemaweb.com/js-browser\">https://poiemaweb.com/js-browser</a></li>\n<li>우아한테코톡 - 브라우저 렌더링 <a href=\"https://youtu.be/sJ14cWjrNis\">https://youtu.be/sJ14cWjrNis</a></li>\n<li>우아한테코톡 - Virtual DOM <a href=\"https://youtu.be/PN_WmsgbQCo\">https://youtu.be/PN_WmsgbQCo</a></li>\n<li>\n<p>부스트코스 웹 풀스택 browser의 동작 <a href=\"https://www.boostcourse.org/web316/lecture/254256\">https://www.boostcourse.org/web316/lecture/254256</a></p>\n<br />   \n<br />\n</li>\n</ul>","frontmatter":{"title":"브라우저 동작 원리","date":"August 13, 2021"}}},"pageContext":{"slug":"/development/브라우저-동작-원리/","previous":{"fields":{"slug":"/react/react로-사고하기/"},"frontmatter":{"title":"React로 사고하기"}},"next":{"fields":{"slug":"/development/이벤트-루프/"},"frontmatter":{"title":"이벤트 루프"}}}},"staticQueryHashes":["2486386679","3128451518"]}